{"version":3,"sources":["webpack://js_project_skeleton/./src/scripts/canvas.js","webpack://js_project_skeleton/./src/scripts/pig.js","webpack://js_project_skeleton/./src/scripts/block.js","webpack://js_project_skeleton/./src/scripts/bird.js","webpack://js_project_skeleton/./src/scripts/projectile.js","webpack://js_project_skeleton/./src/scripts/stages/stageKeys.js","webpack://js_project_skeleton/./src/scripts/stageLoader.js","webpack://js_project_skeleton/./src/scripts/game.js","webpack://js_project_skeleton/./src/index.js"],"names":["this","canvas","document","createElement","width","height","ctx","getContext","bindCanvasToDOM","body","append","classList","add","clearRect","x","y","radius","velX","velY","_ctx","_radius","_mass","_gravity","_ground","_bounce","_frictionX","pig","Image","src","color","save","beginPath","arc","Math","PI","clip","closePath","drawImage","restore","abs","updatePig","drawPig","w","h","r","dx","dy","dr","INSET","PI90","PI2","WALL_NORMS","mass","getMass","setTransform","updateBlock","drawBlock","i","p","getPoint","pos","doCollision","rotate","fillStyle","fillRect","strokeRect","which","velocityA","velocityT","velocity","xx","yy","cos","sin","details","asPolar","vector","polar","mag","dir","vectorAdd","validatePolar","vec","isPolar","pVec","retV","isCart","cartToPolar","undefined","polarToCart","atan2","hypot","vec1","vec2","v1","asCart","v2","force","loc","l","toCenter","pheta","Fv","Fa","accel","deltaV","accelA","v","d1","d2","along","tangent","pointDetails","wallIndex","vv","va","vvc","vectorComponentsForDir","vac","applyForce","bird","drawBird","Projectile","birdProperties","birdObjects","max","currentBird","Bird","rad","launch","bind","angleVal","magVal","angle","magnitude","objectLaunched","ObjectLaunch","push","objLaunch","transfer","length","splice","type","updateObject","updateLaunchLoop","drawObjectLaunch","gravity","ground","bounce","frictionX","birdOnPigCollisionPoints","birdOnBlockCollisionPoints","pigs","score","sqrt","birdOnPigCollisionLogic","blocks","j","circleCenter","checkBirdInterceptBlock","birdOnBlockCollisionLogic","_x","_y","block","pointA","pointB","vel1X","vel1Y","unit","stageKeys","1","0","stageNumber","startPosBird","projectileObject","mouse","addEventListener","e","canvasPosition","left","top","deltaX","deltaY","thetaRadian","degrees","currentStageValues","loadStage","Pig","Block","update","updateEntities","renderEntities","pigsLocationArray","blockLocationArray","drawPigs","animate","drawBlocks","animating","Canvas","initializeEntities","window","requestAnimationFrame","animation","clearCanvas","stageLoader","img","projectile","drawScore","StageLoader","initializeEventListeners","textAlign","textBaseline","font","fillText","querySelector","AngeredBirds","start"],"mappings":"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","file":"main.js","sourcesContent":["class Canvas {\n    constructor() {\n        this.canvas = document.createElement(\"canvas\");\n        this.canvas.width = 1400;\n        this.canvas.height = 750;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.bindCanvasToDOM()\n    }\n\n    bindCanvasToDOM() {\n        // if (document.) check if canvas already exists  else restart, \n        document.body.append(this.canvas);\n        this.canvas.classList.add(\"main-canvas\")\n    }\n\n    clearCanvas() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n}\n\nexport default Canvas;\n","class Pig {\n    constructor(ctx, x, y, radius, velX = 0, velY = 0) {\n        this._ctx = ctx;\n        this.x = x; \n        this.y = y;\n        this.velX = velX;\n        this.velY = velY;\n        this._radius = radius;\n        this._mass = 2;\n\n        this._gravity = { x: 0, y: 0.1 };\n        this._ground = this._ctx.canvas.height - 20;\n        this._bounce = 0.4;\n        this._frictionX = 0.9;\n        this._mass = 2;\n        this.pig = new Image();\n        this.pig.src = \"src/images/peppa.png\"\n    }\n\n    serialize() {\n        return {\n            x: this.x,\n            y: this.y,\n            radius: this.radius,\n            color: this.color,\n        }\n    }\n\n    drawPig(ctx) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this._radius, 0, (Math.PI * 2), false);\n        ctx.clip();\n        ctx.closePath();\n        ctx.drawImage(this.pig, this.x - this._radius, this.y - this._radius, this._radius * 2, this._radius * 2);\n        ctx.restore();\n    }\n\n    updatePig() {\n        this.velX += this._gravity.x;\n        this.velY += this._gravity.y;\n        this.x += this.velX;\n        this.y += this.velY;\n\n        if (this.y >= this._ground) {\n            this.y = this._ground - (this.y - this._ground);\n            this.velY = -Math.abs(this.velY) * this._bounce;\n            if (this.velY >= this._gravity.y) {\n                this.velY = 0;\n                this.y = this._ground - this._gravity.y;\n            }\n            if (this.velX > 0) {\n                this.velX -= this._frictionX;\n            }\n            if (this.velX < 0) {\n                this.velX += this._frictionX;\n            }\n        }\n        // stops ball from bouncing in Y axis\n        if (this.velY<0 && this.velY>-2.1) {\n            this.velY = 0;\n        }\n        // stops ball from moving on X axis if x-velocity < 1.1\n        if (Math.abs(this.velX) < 1.1) {\n            this.velX = 0;\n        }\n    }\n\n    animate(ctx) {\n        this.updatePig();\n        this.drawPig(ctx);\n    }\n}\n\n\nexport default Pig;","class Block {\n    constructor(ctx, x, y, w, h) {\n        this._ctx = ctx;\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n        this.r = 0.1;\n        this.dx = 0;\n        this.dy = 0;\n        this.dr = 0;\n        this.INSET = 10;\n        this.PI = Math.PI;\n        this.PI90 = Math.PI / 2;\n        this.PI2 = Math.PI * 2;\n        this.WALL_NORMS = [ Math.PI / 2, Math.PI, -(Math.PI / 2), 0]\n        this._ground = this._ctx.canvas.height - 105;\n        this.mass = this.getMass()\n    }\n\n    animate(ctx) {\n        ctx.save()\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.updateBlock();\n        this.drawBlock(ctx);\n        ctx.restore()\n\n        for(let i = 0; i < 4; i++){\n            var p = this.getPoint(i);\n            // only do one collision per frame or we will end up adding energy\n            if(p.pos.x < this.INSET){\n                this.x += (this.INSET) - p.pos.x;\n                this.doCollision(p,3)\n            }\n            else if( p.pos.x > ctx.canvas.width-this.INSET){\n                this.x += (ctx.canvas.width - this.INSET) - p.pos.x;\n                this.doCollision(p,1)\n            }\n            else if(p.pos.y < this.INSET){\n                this.y += (this.INSET) - p.pos.y;\n                this.doCollision(p,0)\n            }\n            else if( p.pos.y > ctx.canvas.height - this.INSET){\n                this.y += (ctx.canvas.height - this.INSET) - p.pos.y;\n                this.doCollision(p,2)\n            }\n        }\n    }\n\n    getMass() {\n        return ( this.w * this.h * this.h) / 1000;\n    }\n\n    drawBlock(ctx) {\n        ctx.setTransform(1,0,0,1,this.x,this.y);\n        ctx.rotate(this.r);\n        ctx.fillStyle = \"Blue\";\n        ctx.fillRect(-this.w/2, -this.h/2, this.w, this.h)\n        ctx.strokeRect(-this.w/2, -this.h/2, this.w, this.h)\n    }\n\n    updateBlock() {\n        this.x += this.dx;\n        this.y += this.dy;\n        this.dy += 0.061;\n        this.r += this.dr;\n\n        // if (this.y >= this._ground) {\n        //     this.y = this._ground \n        // }\n    }\n\n    getPoint(which) {\n        var dx, dy, x, y, xx, yy, velocityA, velocityT, velocity;\n\n        dx = Math.cos(this.r);\n        dy = Math.sin(this.r);\n\n        switch (which) {\n            case 0:\n                x = -this.w / 2;\n                y = -this.h / 2;\n                break;\n            case 1:\n                x = this.w / 2;\n                y = -this.h / 2;\n                break;\n            case 2:\n                x = this.w / 2;\n                y = this.h / 2;\n                break;\n            case 3:\n                x = -this.w / 2;\n                y = this.h / 2;\n                break;\n            case 4:\n                x = this.x;\n                y = this.y;\n        }\n\n        var xx , yy;\n        xx = x * dx + y * -dy;\n        yy = x * dy + y * dx;\n\n        var details = this.asPolar(this.vector(xx, yy));\n\n        xx += this.x;\n        yy += this.y;\n\n        velocityA = this.polar(details.mag * this.dr, details.dir + this.PI90);\n        velocityT = this.vectorAdd(velocity = this.vector(this.dx, this.dy), velocityA);\n\n        return {\n            velocity: velocity,\n            velocityT: velocityT,\n            velocityA : velocityA,\n            pos: this.vector(xx, yy),\n            radius: details.mag\n        }\n    }\n\n    polar(mag = 1, dir = 0) {\n        return this.validatePolar({dir: dir, mag: mag})\n    }\n\n    vector(x = 1, y = 0) {\n        return { x: x, y: y};\n    }\n\n    validatePolar(vec) {\n        if (this.isPolar(vec)) {\n            if(vec.mag < 0){\n                vec.mag = -vec.mag;\n                vec.dir += this.PI;\n            }\n        }\n        return vec;\n    }\n\n    polarToCart(pVec, retV = {x: 0, y: 0}){\n        retV.x = Math.cos(pVec.dir) * pVec.mag;\n        retV.y = Math.sin(pVec.dir) * pVec.mag;\n        return retV\n    }\n\n    asPolar(vec) {\n        if (this.isCart(vec)) {\n            return this.cartToPolar(vec)\n        }\n        if (vec.mag < 0) {\n            vec.mag = -vec.mag;\n            vec.dir += this.PI;\n        }\n        return { dir: vec.dir, mag: vec.mag};\n    }\n\n    isCart(vec) { if(vec.x !== undefined && vec.y !== undefined) { return true; } return false; }\n    isPolar(vec) { if(vec.mag !== undefined && vec.dir !== undefined) { return true; } return false; }\n    asCart(vec) {\n        if (this.isPolar(vec)) {return this.polarToCart(vec)}\n        return {x: vec.x, y: vec.y}\n    }\n    cartToPolar(vec, retV = {dir: 0, mag: 0}) {\n        retV.dir = Math.atan2(vec.y, vec.x);\n        retV.mag = Math.hypot(vec.x, vec.y);\n        return retV;\n    }\n\n    vectorAdd(vec1, vec2) {\n        var v1 = this.asCart(vec1);\n        var v2 = this.asCart(vec2);\n        return this.vector(v1.x + v2.x, v1.y + v2.y)\n    }\n\n    applyForce(force, loc) {\n        this.validatePolar(force);\n        var l = this.asCart(loc);\n        var toCenter = this.asPolar(this.vector(this.x - l.x, this.y - l.y));\n        var pheta = toCenter.dir - force.dir;\n        var Fv = Math.cos(pheta) * force.mag;\n        var Fa = Math.sin(pheta) * force.mag;\n        var accel = this.asPolar(toCenter);\n        accel.mag = Fv / this.mass; \n        var deltaV = this.asCart(accel); \n        this.dx += deltaV.x \n        this.dy += deltaV.y\n        var accelA = Fa / (toCenter.mag  * this.mass); \n        this.dr += accelA;\n    }\n\n    vectorComponentsForDir(vec, dir) {\n        var v = this.asPolar(vec); \n        var pheta = v.dir - dir;\n        var Fv = Math.cos(pheta) * v.mag;\n        var Fa = Math.sin(pheta) * v.mag;\n\n        var d1 = dir;\n        var d2 = dir + this.PI90;    \n        if(Fv < 0){\n            d1 += this.PI;\n            Fv = -Fv;\n        }\n\n        if(Fa < 0){\n            d2 += this.PI;\n            Fa = -Fa;\n        }\n        return {\n            along : this.polar(Fv,d1),\n            tangent : this.polar(Fa,d2)\n        };\n    }\n\n    doCollision(pointDetails, wallIndex) {\n        var vv = this.asPolar(pointDetails.velocity); \n        var va = this.asPolar(pointDetails.velocityA); \n        var vvc = this.vectorComponentsForDir(vv, this.WALL_NORMS[wallIndex]);\n        var vac = this.vectorComponentsForDir(va, this.WALL_NORMS[wallIndex]);\n\n        vvc.along.mag *= 1.18; \n        vac.along.mag *= 1.18; \n\n        vvc.along.mag *= this.mass;\n        vac.along.mag *= this.mass;\n\n        vvc.along.dir += this.PI;\n        vac.along.dir += this.PI;\n\n        vvc.tangent.mag *= 0.18;  \n        vac.tangent.mag *= 0.18;\n        vvc.tangent.mag *= this.mass  \n        vac.tangent.mag *= this.mass\n        vvc.tangent.dir += this.PI; \n        vac.tangent.dir += this.PI;\n\n        this.applyForce(vvc.along, pointDetails.pos)    \n        this.applyForce(vvc.tangent, pointDetails.pos)    \n        this.applyForce(vac.along, pointDetails.pos)    \n        this.applyForce(vac.tangent, pointDetails.pos)    \n    }\n}\n\nexport default Block","class Bird {\n    constructor(ctx, x, y, radius, velX = 0, velY = 0) {\n        this._ctx = ctx;\n        this.x = x;\n        this.y = y;\n        this.velX = velX;\n        this.velY = velY;\n        this._radius = radius;\n        this._gravity = { x: 0, y: 0.1 };\n        this._ground = this._ctx.canvas.height;\n        this._bounce = 1.3;\n\n        this.bird = new Image();\n        this.bird.src = \"src/images/birds.png\"\n    }\n\n    drawBird(ctx, x, y) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.arc(x, y, this._radius, 0, (Math.PI * 2), false);\n        ctx.clip();\n        ctx.closePath();\n        ctx.drawImage(this.bird, x - this._radius, y - this._radius, this._radius * 2, this._radius * 2)\n        ctx.restore();\n    }\n\n    // updateBird() {\n    //     this.velX += this._gravity.x;\n    //     this.velY += this._gravity.y;\n    //     this.x += this.velX;\n    //     this.y += this.velY;\n\n    //     if (this.y >= this._ground) {\n    //         this.y = this._ground - (this.y - this._ground);\n    //         this.velY = -Math.abs(this.velY) * this._bounce;\n    //         if (this.velY >= this._gravity.y) {\n    //             this.velY = 0;\n    //             this.y = this._ground - this._gravity.y;\n    //         }\n    //     }\n    // }\n\n    animate(ctx) {\n        this.drawBird(ctx);\n    }\n}\n\nexport default Bird;","import Bird from \"./bird\";\n\nclass Projectile {\n    constructor(ctx, birdProperties) {\n        this.ctx = ctx;\n        this.birdObjects = [];\n        this.max = 1;\n        this.currentBird = new Bird(this.ctx, birdProperties.x, birdProperties.y, birdProperties.rad);\n        this.launch = this.launch.bind(this);\n    }\n\n    launch(angleVal, magVal) {\n        let angle = Math.PI * angleVal /180;\n        let magnitude = magVal;\n\n        this.objectLaunched = new ObjectLaunch(this.ctx, 125, 650, this.currentBird);\n        this.birdObjects.push(this.objectLaunched);\n        objLaunch.velY =- magnitude * Math.sin(angle);\n        objLaunch.velX = magnitude * Math.cos(angle);\n        objLaunch.transfer = 0.8;\n    }\n\n    updateLaunchLoop() {\n        if (this.birdObjects.length > this.max) {\n            // this.birdObjects[0].remove();\n            this.birdObjects = this.birdObjects.splice(1);\n        }\n        for (let i = 0; i < this.birdObjects.length; i++) {\n            let currentBird = this.birdObjects[i]\n            currentBird.velY += 1.53;\n            currentBird.x += currentBird.velX / 3;\n            currentBird.y += currentBird.velY / 3;\n            if (currentBird.y + currentBird.type.radius > 700) {\n                currentBird.y = 700 - currentBird.type.radius;\n            }\n            currentBird.updateObject()\n        }\n    }\n    \n    update() {\n        this.updateLaunchLoop();\n    }\n\n    drawLaunchLoop() {\n        for (let i = 0; i < this.birdObjects.length; i++) {\n            let currentBird = this.birdObjects[i];\n            currentBird.drawObjectLaunch(this.ctx);\n        }\n    }\n\n    drawProjectile() {\n\n    }\n}\n\nclass ObjectLaunch {\n    constructor(ctx, x = 50, y = 50, type) {\n        this.ctx = ctx;\n        this.x = x;\n        this.y = y;\n        this.velX = 0;\n        this.velY = 0;\n        this.type = type;\n        this.transfer = 0.9;\n        // this.removed = false;\n        this.gravity = { x: 0, y: 0.1 };\n        this.ground = this.ctx.canvas.height - 20;\n        this.bounce = 0.5;\n        this.frictionX = 0.9;\n        this.mass = 2;\n        this.radius = 14;\n\n        this.birdOnPigCollisionPoints = 5500;\n        this.birdOnBlockCollisionPoints = 325;\n    }\n\n    // remove() {\n    //     this.removed = true;\n    // }\n\n    drawObjectLaunch(ctx) {\n        this.type.drawBird(ctx, this.x, this.y);\n        // this.drawScore(ctx, 0)\n    }\n\n    checkBirdOnPigCollision(pigs, score) {\n        if (pigs) {\n            for (let i = 0; i < pigs.length; i++) {\n                if (this.x + this.type.radius + pigs[i].radius > pigs[i].x\n                    && this.x < pigs[i].x + this.type.radius + pigs[i].radius\n                    && this.y + this.type.radius + pigs[i].radius > pigs[i].y\n                    && this.y < pigs[i].y + this.type.radius + pigs[i].radius) \n                {\n                    // pythagoream theorem to be more exact on collision\n                    let distance = Math.sqrt(\n                          ((this.x - pigs[i].x) * (this.x - pigs[i].x))\n                        + ((this.y - pigs[i].y) * (this.y - pigs[i].y))\n                    )\n\n                    if (distance < this.type.radius + pigs[i].radius) {\n                        this.birdOnPigCollisionLogic(pigs[i], score)\n                    }\n                }\n            }\n        }\n    }\n\n    checkBirdOnBlockCollision(blocks, score) {\n        if (blocks) {\n            for (let i = 0; i < blocks.length; i++) {\n                for (let j = 0; j < 4; j++){\n                    const circleCenter = [this.x, this.y];\n                    if (j + 1 === 4) {\n                        if (this.checkBirdInterceptBlock(blocks[i].getPoint(j), blocks[i].getPoint(0), circleCenter, this.radius)) {\n                            this.birdOnBlockCollisionLogic(blocks[i], score)\n                        }\n                    } else {\n                        if (this.checkBirdInterceptBlock(blocks[i].getPoint(j), blocks[i].getPoint(j + 1), circleCenter, this.radius)) {\n                            this.birdOnBlockCollisionLogic(blocks[i], score)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    birdOnPigCollisionLogic(pig, score) {\n        score += this.birdOnPigCollisionPoints;\n        const mass1 = this.type.radius;\n        const mass2 = pig._radius;\n        if (pig.velX === 0) pig.velX = 9;\n        // if (pig.velY === 0) pig.velY = 6;\n        // const pigVelX = pig.velX;\n        // const pigVelY = pig.velY;\n\n        this.velX = -this.velX;\n        this.velY = -this.velY;\n\n        pig.velX = -pig.velX;\n        pig.velY = -pig.velY;\n        \n        // this.velX = ( this.velX * (mass1 - mass2) + (2 * mass2 * pigVelX)) / (mass1 + mass2);\n        // this.velY = ( this.velY * (mass1 - mass2) + (2 * mass2 * pigVelY)) / (mass1 + mass2);\n        // pig.velX = ( pigVelX * (mass2 - mass1) + (2 * mass1 * this.velX)) / (mass1 + mass2);\n        // pig.velY = ( pigVelY * (mass2 - mass1) + (2 * mass1 * this.velY)) / (mass1 + mass2);\n        \n        this._x += this.velX;\n        this._y += this.velY;\n        pig.x += pig.velX;\n        pig.y += pig.velY;\n    }\n\n    birdOnBlockCollisionLogic(block, score) {\n        score += this.birdOnBlockCollisionPoints;\n        this.velX = -this.velX;\n        this.velY = -this.velY;\n\n        this.x += this.velX;\n        this.y += this.velY;\n    }\n\n    checkBirdInterceptBlock(pointA, pointB, circleCenter, radius) {\n        let dist;\n        const vel1X = pointB.pos.x - pointA.pos.x;\n        const vel1Y = pointB.pos.y - pointA.pos.y;\n        const vel2X = circleCenter[0] - pointA.pos.x;\n        const vel2Y = circleCenter[1] - pointA.pos.y;\n        const unit = (vel2X * vel1X + vel2Y * vel1Y) / (vel1Y * vel1Y + vel1X * vel1X);\n        if (unit >= 0 && unit <= 1){\n            dist = (pointA.pos.x  + vel1X * unit - circleCenter[0]) ** 2 + (pointA.pos.y + vel1Y * unit - circleCenter[1]) ** 2;\n        } else {\n            dist = unit < 0 ? \n                (pointA.pos.x - circleCenter[0]) ** 2 + (pointA.pos.y - circleCenter[1]) ** 2 :\n                (pointB.pos.x - circleCenter[0]) ** 2 + (pointB.pos.y - circleCenter[1]) ** 2;\n        }\n        return dist < radius * radius;\n    }\n\n    updateObject() {\n        // this.checkBirdOnPigCollision(pigs, score)\n        // this.checkBirdOnBlockCollision(blocks, score)\n        this.velX += this.gravity.x;\n        this.velY += this.gravity.y;\n        this.x += this.velX;\n        this.y += this.velY;\n\n        if (this.y >= this.ground) {\n            this.y = this.ground - (this.y - this.ground);\n            this.velY = -Math.abs(this.velY) * this.bounce;\n            if (this.velY >= this.gravity.y) {\n                this.velY = 0;\n                this.y = this.ground - this.gravity.y;\n            }\n            if (this.velX > 0) {\n                this.velX -= this.frictionX;\n            }\n            if (this.velX < 0) {\n                this.velX += this.frictionX;\n            }\n        }\n        // stops ball from bouncing in Y axis\n        if ( this.y >= this.ground - 10) {\n            if (this.velY < 0 && this.velY > -1.1) {\n                this.velY = 0;\n            }\n        }\n        // stops ball from moving on X axis if x-velocity < 1.1\n        if (Math.abs(this.velX) < 1.1) {\n            this.velX = 0;\n        }\n    }\n}\n\n\nexport default Projectile;","export const stageKeys = {\n    1 : {\n        \"numberOfPigs\": 2,\n        \"pigProperties\": {\n            0 : {\n                x: 500,\n                y: 600,\n                rad: 15,\n            },\n            1 : {\n                x: 600,\n                y: 600,\n                rad: 15,\n            }\n        },\n\n        \"numberOfBlocks\": 2,\n        \"blockProperites\": {\n            0 : {\n                x: 350,\n                y: 700,\n                w: 30,\n                h: 100,\n            },\n            1: {\n                x: 700,\n                y: 700,\n                w: 50,\n                h: 140,\n            }\n        },\n\n        \"birdProperties\": {\n            x: 104.7,\n            y: 455,\n            rad: 14,\n        }\n    }\n}","import Pig from \"./pig\";\nimport Block from \"./block\";\nimport Projectile from \"./projectile\";\nimport {stageKeys} from \"./stages/stageKeys\";\n\nclass StageLoader {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.canvas = ctx.canvas;\n        this.score = 0;\n        this.stageNumber = 1;\n        // this.highscore using localStorage\n        this.startPosBird = [];\n\n        this.projectileObject = {};\n        this.pigs = [];\n        this.blocks = [];\n\n    }\n\n    initializeEventListeners() {\n        const mouse = {\n            x: this.canvas.width/2,\n            y: this.canvas.height/2,\n        }\n\n        this.canvas.addEventListener('mouseup', function(e){\n            mouse.x = e.x - canvasPosition.left;\n            mouse.y = e.y - canvasPosition.top;\n    \n            deltaX = mouse.x - this.startPosBird[0];\n            deltaY = mouse.y - this.startPosBird[1];\n            let thetaRadian = Math.atan2(deltaY, deltaX);\n            let degrees = -((Math.abs(thetaRadian * 180 / Math.PI) - 270) % 90);\n            this.projectileObject.launch(degrees , (Math.abs(mouse.x - 130) / 2))\n        })\n    }\n\n    initializeEntities() {\n        const currentStageValues = stageKeys[this.stageNumber];\n        this.loadStage(currentStageValues);\n    }\n\n    // add health to pigs V2\n    loadStage(currentStageValues) {\n        this.projectileObject = new Projectile(this.ctx, currentStageValues[\"birdProperties\"]);\n        this.startPosBird = [currentStageValues[\"birdProperties\"].x, currentStageValues[\"birdProperties\"].y]\n\n        for (let i = 0; i < currentStageValues[\"numberOfPigs\"]; i++) {\n            this.pigs.push(new Pig(\n                this.ctx, \n                currentStageValues[\"pigProperties\"][i].x, \n                currentStageValues[\"pigProperties\"][i].y, \n                currentStageValues[\"pigProperties\"][i].rad));\n        }\n\n        for (let i = 0; i < currentStageValues[\"numberOfBlocks\"]; i++) {\n            this.blocks.push(new Block(\n                this.ctx, \n                currentStageValues[\"blockProperites\"][i].x, \n                currentStageValues[\"blockProperites\"][i].y,\n                currentStageValues[\"blockProperites\"][i].w,\n                currentStageValues[\"blockProperites\"][i].h));\n        }\n    }\n\n    updateEntities() {\n        this.projectileObject.update()\n        // for movement\n        // detectCollisions inside util file\n\n    }\n\n    renderEntities() {\n        //  call this draw\n\n    }\n\n    update() {\n        this.updateEntities();\n        this.renderEntities();\n    }\n\n    // drawScore(ctx, score) { \n    //     ctx.textAlign = \"right\";\n    //     ctx.textBaseline = \"top\";\n    //     ctx.fillStyle = \"WHITE\";\n    //     ctx.font = 50 + \"px dejavu sans mono\";\n    //     ctx.fillText(score, ctx.canvas.width - 50 / 2, 0)\n    // }\n\n    drawPigs(ctx) {\n        if (this.pigs.length === 0) { // repetitive code for loop does not proc \n            for (let i = 0; i < this.pigsLocationArray.length; i++) {\n                this.pigs.push(new Pig(ctx, this.pigsLocationArray[i][0], this.pigsLocationArray[i][1]))\n            }\n        }\n    }\n\n    drawBlocks(ctx) {\n        if (this.blocks.length === 0){\n            for (let i = 0; i < this.blockLocationArray.length; i++) {\n                this.blocks.push(new Block(ctx, this.blockLocationArray[i][0], this.blockLocationArray[i][1]))\n            }\n        }\n    }\n\n    animate(ctx) {\n        this.drawPigs(ctx);\n        for (let i = 0; i < this.pigs.length; i++) {\n            this.pigs[i].animate(ctx);\n        }\n        \n        this.drawBlocks(ctx);\n        for (let i = 0; i < this.blocks.length; i++) {\n            this.blocks[i].animate(ctx);\n        }\n    }\n\n}\n\nexport default StageLoader;","// import \"./styles/index.scss\";\nimport Canvas from \"./canvas\";\nimport StageLoader from \"./stageLoader\";\n\nclass AngeredBirds {\n    constructor() {\n        this.animating = true;\n    }\n\n    start() {\n        this.canvas = new Canvas()\n        this.canvas.bindCanvasToDOM();\n        this.initializeEntities();\n\n        const animation = () => {\n            this.canvas.clearCanvas();\n            if (this.animating) {\n                this.stageLoader.update();\n\n\n\n\n                \n                let img = new Image();\n                img.src = \"src/images/pixil-layer-Background.png\";\n                this.canvas.ctx.drawImage(img,90,570);\n\n                stageLoader.animate(canvas.ctx)\n                projectile.animate(canvas.ctx, stageLoader.pigs, stageLoader.blocks)\n                \n                stageLoader.update() // call update entities\n\n                this.drawScore(canvas.ctx, score);\n                window.requestAnimationFrame(animation);\n            }\n        }\n        window.requestAnimationFrame(animation);\n    }\n\n    initializeEntities() {\n        this.stageLoader = new StageLoader(this.canvas.ctx);\n        this.stageLoader.initializeEntities();\n        this.stageLoader.initializeEventListeners();\n    }\n\n    drawScore(ctx, score) { \n        ctx.textAlign = \"right\";\n        ctx.textBaseline = \"top\";\n        ctx.fillStyle = \"WHITE\";\n        ctx.font = 50 + \"px dejavu sans mono\";\n        ctx.fillText(score, ctx.canvas.width - 50 / 2, 0)\n    }\n}\n\nexport default AngeredBirds;","import \"./styles/index.scss\";\nimport AngeredBirds from \"./scripts/game\";\n\ndocument.querySelector(\"#canvas\").addEventListener(\"click\", init);\n\nfunction init() {\n    new AngeredBirds().start();\n}\n\nfunction startCanvas() {\n    // newGame.start\n\n    const canvas = new Canvas();\n    canvas.bindCanvasToDOM();\n    const canvasObj = canvas.canvas;\n    let canvasPosition = canvasObj.getBoundingClientRect()\n    const projectile = new Projectile(canvas.ctx, score);\n\n    const mouse = {\n        x: canvas.width/2,\n        y: canvas.height/2,\n    }\n    \n    canvasObj.addEventListener('mousedown', function(e) {\n        mouse.x = e.x - canvasPosition.left;\n        mouse.y = e.y - canvasPosition.top;\n\n    })\n\n    canvasObj.addEventListener('mouseup', function(e){\n        mouse.x = e.x - canvasPosition.left;\n        mouse.y = e.y - canvasPosition.top;\n\n        deltaX = mouse.x - centerX;\n        deltaY = mouse.y - centerY;\n        let thetaRadian = Math.atan2(deltaY, deltaX);\n        let degrees = -((Math.abs(thetaRadian * 180 / Math.PI) - 270) % 90);\n        projectile.launch(degrees , (Math.abs(mouse.x - 130) / 2))\n    })\n\n    const stageLoader = new StageLoader()\n\n    let animating = true;\n\n    const animation = () => {\n        canvas.clearCanvas();\n        if (animating) {\n            let img = new Image();\n            img.src = \"src/images/pixil-layer-Background.png\";\n            canvas.ctx.drawImage(img,90,570);\n            stageLoader.animate(canvas.ctx)\n            projectile.animate(canvas.ctx, stageLoader.pigs, stageLoader.blocks)\n            drawScore(canvas.ctx, score);\n            \n            window.requestAnimationFrame(animation);\n        }\n    };\n\n    window.requestAnimationFrame(animation);\n}\n\n"],"sourceRoot":""}